using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace WebMoney.Cryptography.Tests
{
    [TestClass]
    public class MD4Tests
    {
        private const int HashLength = 16;

        // I. Аргумент меньше 56 байт и меньше 64 байт
        private static readonly byte[] Message1 = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A};

        private static readonly byte[] Etalon1 =
        {
            0xFE, 0x86, 0xEB, 0xA3, 0x4E, 0xB9, 0xDA, 0x3B, 0x76, 0x55, 0x5B, 0x12,
            0x88, 0x08, 0xAA, 0x36
        };

        // II. Аргумент равен 56 байтам
        private static readonly byte[] Message2 =
        {
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
            0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
            0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
            0x33, 0x34, 0x35, 0x36, 0x37, 0x38
        };

        private static readonly byte[] Etalon2 =
        {
            0x01, 0x15, 0x0F, 0xF5, 0x10, 0xD3, 0x59, 0x95, 0x2E, 0xA0, 0xF5, 0x17,
            0x59, 0x21, 0xA7, 0x31
        };

        // III. Аргумен больше 56 байт, но меньше 64 байт
        private static readonly byte[] Message3 =
        {
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
            0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
            0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
            0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C
        };

        private static readonly byte[] Etalon3 =
        {
            0x99, 0xA0, 0x4D, 0xD3, 0x6A, 0xB0, 0xC8, 0x85, 0xE8, 0x42, 0xF4, 0xE4,
            0xB2, 0x88, 0x3A, 0x2D
        };

        // III. Аргумен равен 64 байтам
        private static readonly byte[] Message4 =
        {
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
            0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
            0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
            0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C,
            0x3D, 0x3E, 0x3F, 0x40
        };

        private static readonly byte[] Etalon4 =
        {
            0x39, 0x34, 0xD5, 0x1C, 0x7F, 0xF4, 0x97, 0x0F, 0x9F, 0x0A, 0xC3, 0x14,
            0xCE, 0xDE, 0xEB, 0xFE
        };

        // III. Аргумен больше 64 байт
        private static readonly byte[] Message5 =
        {
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
            0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
            0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
            0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C,
            0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46
        };

        private static readonly byte[] Etalon5 =
        {
            0x40, 0x71, 0x98, 0xCC, 0xE7, 0xE6, 0x70, 0xFF, 0xCC, 0x4A, 0x85, 0x7C,
            0xAB, 0x76, 0xFA, 0xBA
        };

        [TestMethod]
        public void L56()
        {
            Assert.IsTrue(CompareHash(Message1, Etalon1));
        }

        [TestMethod]
        public void E56()
        {
            Assert.IsTrue(CompareHash(Message2, Etalon2));
        }

        [TestMethod]
        public void M56L64()
        {
            Assert.IsTrue(CompareHash(Message3, Etalon3));
        }

        [TestMethod]
        public void E64()
        {
            Assert.IsTrue(CompareHash(Message4, Etalon4));
        }

        [TestMethod]
        public void M64()
        {
            Assert.IsTrue(CompareHash(Message5, Etalon5));
        }

        private bool CompareHash(byte[] argument, byte[] etalon)
        {
            if (HashLength != etalon.Length)
                throw new ArgumentOutOfRangeException(nameof(etalon));

            byte[] hash;

            using (MD4 md4 = new MD4Managed())
            {
                hash = md4.ComputeHash(argument);
            }

            if (HashLength != hash.Length)
                return false;

            for (int pos = 0; pos < HashLength; pos++)
            {
                if (hash[pos] != etalon[pos])
                    return false;
            }

            return true;
        }
    }
}